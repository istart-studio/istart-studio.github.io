---
layout: post
title: 复杂度中的低成本、安全、规模
date: 2018-09-01 00:00:00 +0800
description:  # Add post description (optional)
img: # Add image post (optional)
tags: [架构, 设计原则] # add tag
---

# 合适原则

**“合适优于业界领先”**

- 没那么多人，却想干那么多活，是失败的第一个主要原因。
- 没有那么多积累，却想一步登天，是失败的第二个主要原因。
- 没有那么卓越的业务场景，却幻想灵光一闪成为天才，是失败的第三个主要原因。

# 简单原则

**“简单优于复杂”**

- 组件越多，就越有可能其中某个组件出现故障
- 某个组件改动，会影响关联的所有组件
- 定位一个复杂系统中的问题总是比简单系统更加困难。

为什么复杂的电路就意味更强大的功能，而复杂的架构却有很多问题呢？根本原因在于电路一旦设计好后进入生产，就不会再变，复杂性只是在设计时带来影响；而一个软件系统在投入使用后，后续还有源源不断的需求要实现，因此要不断地修改系统，复杂性在整个系统生命周期中都有很大影响。

《UNIX 编程艺术》总结的 KISS（Keep It Simple, Stupid!）原则一样适应于架构设计

# 演化原则

**“演化优于一步到位”**

**而对于软件来说，变化才是主题**

软件架构设计其实更加类似于大自然“设计”一个生物，通过演化让生物适应环境，逐步变得更加强大：
- 首先，生物要适应当时的环境。
- 其次，生物需要不断地繁殖，将有利的基因传递下去，将不利的基因剔除或者修复。
- 第三，当环境变化时，生物要能够快速改变以适应环境变化；如果生物无法调整就被自然淘汰；新的生物会保留一部分原来被淘汰生物的基因。

软件架构设计同样是类似的过程：

- 首先，设计出来的架构要满足当时的业务需要。
- 其次，架构要不断地在实际应用过程中迭代，保留优秀的设计，修复有缺陷的设计，改正错误的设计，去掉无用的设计，使得架构逐渐完善。
- 第三，当业务发生变化时，架构要扩展、重构，甚至重写；代码也许会重写，但有价值的经验、教训、逻辑、设计等（类似生物体内的基因）却可以在新架构中延续。

**合适优于先进>演化优于一步到位>简单优于复杂**

合适也就是适应当前需要是首位的，连当前需求都满足不了谈不到其他。
架构整体发展是要不断演进的，在这个大前提下，尽量追求简单，但也有该复杂的时候，就要复杂，比如生物从单细胞一直演化到如今，复杂是避免不了的，
