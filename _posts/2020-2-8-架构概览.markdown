---
layout: post
title: 架构概览
date: 2020-02-08 00:00:00 +0300
description:  # Add post description (optional)
img: # Add image post (optional)
tags: [架构] # add tag
---

先放着大纲，趁宅在家，慢慢写

这个架构图能覆盖大多数互联网公司的技术点：

![运行服务架构]({{site.baseurl}}/assets/img/post/通用架构.png)

# 存储层

## SQL

一般情况下互联网行业都是用 MySQL、PostgreSQL 这类开源数据库。

这类数据库的特点是开源免费，拿来就用；但缺点是性能相比商业数据库要差一些。

但随着性能要求越来越高，**分表拆库多实例**是必然的方向，包括Oracle也是，只是时间早晚的事。

但**分表拆库多实例**带来复杂度的问题：数据如何拆分、数据如何组合？这个复杂度的问题解决起来并不容易，如果每个业务都去实现一遍，重复造轮子将导致投入浪费、效率降低，业务开发想快都快不起来。

所以互联网公司流行的做法是业务发展到一定阶段后，就会将这部分功能独立成**中间件**。例如百度的 DBProxy、淘宝的 TDDL。

将分库分表做到自动化和平台化，一般是规模很大的公司才会自己做。

中小公司建议使用开源方案，例如 MySQL 官方推荐的 MySQL Router、360 开源的数据库中间件 Atlas。

假如公司业务继续发展，规模继续扩大，SQL 服务器越来越多，
如果每个业务都基于统一的数据库中间件独立部署自己的 SQL 集群，就会导致新的复杂度问题，具体表现在：

- 数据库资源使用率不高，比较浪费。
- 各 SQL 集群分开维护，投入的维护成本越来越高。

因此，实力雄厚的大公司此时一般都会在 SQL 集群上构建 SQL 存储平台，
以对业务透明的形式提供资源分配、数据备份、迁移、容灾、读写分离、分库分表等一系列服务，
例如淘宝的 UMP（Unified MySQL Platform）系统。

## NoSQL

** NoSQL 是 SQL 的补充 **

- 数据结构与SQL的不同。Memcache 的 key-value 结构、Redis 的复杂数据结构、MongoDB 的文档数据结构。

- 性能也大大优于SQL。（毕竟设计初衷就不一样）

- NoSQL 方案一般自己本身就提供集群的功能，例如 Memcache 的一致性 Hash 集群、Redis 3.0 的集群，
因此 NoSQL 在刚开始应用时很方便，不像 SQL 分库分表那么复杂。

NoSQL 发展到一定规模后，通常都会在 NoSQL 集群的基础之上再实现统一存储平台，平台化的好处：

- 提升运维效率

- 资源利用效率

存储平台主要实现这几个功能：

- 资源动态按需动态分配：例如同一台 Memcache 服务器，可以根据内存利用率，分配给多个业务使用。

- 资源自动化管理：例如新业务只需要申请多少 Memcache 缓存空间就可以了，无需关注具体是哪些 Memcache 服务器在为自己提供服务。

- 故障自动化处理：例如某台 Memcache 服务器挂掉后，有另外一台备份 Memcache 服务器能立刻接管缓存请求，不会导致丢失很多缓存数据。


一般也是大公司才会这么做，简单来说就是如果只有几十台 NoSQL 服务器，做存储平台收益不大；
但如果有几千台 NoSQL 服务器，NoSQL 存储平台就能够产生很大的收益。

## 小文件 

## 大文件


---


# 开发层

# 服务层

# 网络层

# 用户层

# 业务层

# 平台