---
layout: post
title: 架构整洁
date: 2020-02-10 00:00:00 +0300
description:  # Add post description (optional)
img: # Add image post (optional)
tags: [架构] # add tag
---


# 19 策略与层次（Level）

我们对“层次”是严格按照“输入与输出之间的距离”来定义的。也就是说，
一条策略距离系统的输入／输出越远，它所属的层次就越高。而直接管理输入／输出的
策略在系统中的层次是最低的。

例如：依赖关系与其 数据流向 脱钩，而与组件所在的 层次 挂钩。
## 低层次 应该是高层次 的插件


# 20 业务逻辑

业务实体（Entity）并不会知道是哪个业务用例在控制它们，这也是依赖反转原则
DIP ）的另一个应用情景。也就是像业务实体这样的高层概念是无须了解像用例这
样的低层概念的。反之，低层的业务用例却需要了解高层的业务实体。

，为什么业务实体属于高层概念，而用例属于低层概念呢？因为用例描述
的是 个特定的应用情景，这样一来，用例必然会更靠近系统的输入和输出 。而业
务实体是一个可以适用于多个应用情景的一般化概念，相对地离系统的输入和输出
更远。所以，用例依赖于业务实体，而业务实体并不依赖于用例。

在理想情况下，这部分代表业务逻辑的代码应该是整个系统的核心，其他低层
概念的实现应该以插件形式接入系统中 业务逻辑应该是系统中最独立、复用性最高
的代码

# 21 尖叫的软件架构

我们需要仔细考虑如何能保持对系统用例的关注，避免让框架主导我们的
架构设计

## 22 整洁架构

在过去的几十年中，我们曾见证过一系列关于系统架构的想法被提出，列举如：

• 六边形架构（ Hexagonal Architecture) （也称为端口与适配器架构， Ports and Adpaters）：
端口适配器、应用层与领域层。在这种架构中，系统通过适配器的方式与外部交互，将应用服务于领域服务封装在系统内部。
• DCI 架构 ：
DCI是数据Data 场景Context 交互Interactions的简称，DCI是一种特别关注行为的模式(可以对应GoF行为模式)，
而MVC模式是一种结构性模式，MVC模式由于结构化，而可能忽视了行为事件。
Javascript这种函数式functional语言能够帮助我们更加注重行为事件。
• BCE 架构 ：